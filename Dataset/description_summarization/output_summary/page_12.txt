TITLE: Python Data Types - javatpoint

INTRODUCTION:

Python is a dynamically typed language. This means variables do not require explicit type declarations, as the interpreter automatically assigns the data type based on the value.

DATA TYPES:

Numbers: Python supports three types of numbers: integers, floating-point numbers, and complex numbers.

Sequence Types: Python includes several sequence types such as strings, lists, and tuples.

Boolean: Boolean values represent True and False.

Set: A set is an unordered collection of unique elements.

Dictionary: A dictionary stores key-value pairs, where the keys are unique.

NUMERIC TYPES:

Int: Whole numbers, including both positive and negative values.

```python
x = 10  # Integer example
```

Float: Stores floating-point numbers with up to 15 decimal places.

```python
y = 3.14  # Float example
```

Complex: Stores complex numbers in the form x + iy.

```python
z = 2 + 3j  # Complex number example
```

SEQUENCE TYPES:

String: A sequence of characters, which can be defined using single, double, or triple quotes.

```python
string_example = "Hello, World!"  # String example
```

List: A collection of items that can store elements of various data types, represented by square brackets.

```python
list_example = [1, 2.5, "Python"]  # List example
```

Tuple: Similar to lists, but immutable (i.e., their elements cannot be modified).

```python
tuple_example = (1, 2, 3)  # Tuple example
```

DICTIONARY:
A dictionary is a collection of key-value pairs where the keys are unique. It stores a value for each key.

```python
dict_example = {"name": "John", "age": 30}  # Dictionary example
```

BOOLEAN:
Boolean values are used for conditional checks, with True and False representing the two possible values.

```python
is_active = True  # Boolean example
```

SET:
A set is an unordered collection of unique elements. It is iterable and mutable, meaning its contents can change after creation.

```python
set_example = {1, 2, 3}  # Set example
```

CONCLUSION:

Python provides a variety of data types, including numbers, sequences, and collections, allowing developers to handle different types of data efficiently.
